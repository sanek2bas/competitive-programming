namespace Route256.Sandbox
{
    public static class PlayingFieldAnalysis
    {
        /// <summary>
        /// Игровое поле представляет собой белый прямоугольник n x m,
        /// на котором изображены черные прямоугольные рамки. 
        /// Толщина каждой рамки равна 1, рамки не пересекаются и не касаются. Таким образом, для любых двух рамок a и b верно:
        /// - либо a вложена в b,
        /// - либо b вложена в a,
        /// - либо a не вложена в b и одновременно b не вложена в a.
        /// Для каждой рамки найдите количество рамок, в которые она вложена. 
        /// Выведите получившиеся r чисел в порядке неубывания, где r — количество рамок на поле.s
        /// </summary>
        public static int[] Execute(string[] field)
        {
            var rows = field.Count();
            var cols = field[0].Length;
            var visited = new bool[rows, cols];
            var result = new List<int>();
            int level = 0;
            DFS(field, 0, 0, rows - 1, cols - 1, visited, level, result);
            return result.Order().ToArray();
        }

        private static void DFS(string[] field, int startRow, int startCol, int endRow, int endCol, bool[,] visited, int level, List<int> result)
        {
            for (int r = startRow; r <= endRow; r++)
            {
                for (int c = startCol; c <= endCol; c++)
                {
                    if (field[r][c] == '.' ||
                        visited[r, c])
                        continue;

                    var sR = r;
                    var sC = c;
                    while (c < field[r].Length && field[r][c] == '*')
                    {
                        visited[r, c] = true;
                        c++;
                    }
                    c--;
                    r++;
                    var eC = c;
                    while (r < field.Length && field[r][c] == '*')
                    {
                        visited[r, sC] = true;
                        visited[r, eC] = true;
                        r++;
                    }
                    r--;
                    c--;
                    var eR = r;
                    while (c > sC)
                    {
                        visited[eR, c] = true;
                        c--;
                    }
                    result.Add(level);
                    DFS(field, sR + 2, sC + 2, eR - 2, eC - 2, visited, level+1, result);
                    r = sR;
                    c = eC + 1;
                }
            }
        }

        public static IEnumerable<(string[] field, int[] answer)> GetTests()
        {
            yield return (
                new string[]
                {
                    "*********......",
                    "*.......*..****",
                    "*.***...*..*..*",
                    "*.*.*...*..****",
                    "*.***...*......",
                    "*.......*......",
                    "*...***.*......",
                    "*...*.*.*.***..",
                    "*...*.*.*.*.*..",
                    "*...*.*.*.***..",
                    "*...***.*......",
                    "*.......*......",
                    "*.......*......",
                    "*********......",
                    "...............",
                    ".**************",
                    ".*............*",
                    ".*.*********..*",
                    ".*.*.......*..*",
                    ".*.*.*****.*..*",
                    ".*.*.*...*.*..*",
                    ".*.*.*****.*..*",
                    ".*.*.......*..*",
                    ".*.*********..*",
                    ".*............*",
                    ".**************"
                },
                new int[] { 0, 0, 0, 0, 1, 1, 1, 2 });
            yield return (
                new string[]
                {
                    "***************",
                    "*.............*",
                    "*.***********.*",
                    "*.*.........*.*",
                    "*.*.*******.*.*",
                    "*.*.*.....*.*.*",
                    "*.*.*.***.*.*.*",
                    "*.*.*.*.*.*.*.*",
                    "*.*.*.***.*.*.*",
                    "*.*.*.....*.*.*",
                    "*.*.*******.*.*",
                    "*.*.........*.*",
                    "*.***********.*",
                    "*.............*",
                    "***************"
                },
                new int[] { 0, 1, 2, 3 });
            yield return (
                new string[]
                {
                    "***.",
                    "*.*.",
                    "***."
                },
                new int[] { 0 });
            yield return (
                new string[]
                {
                    "....................",
                    "....................",
                    "***..**************.",
                    "*.*..*............*.",
                    "***..*..***.......*.",
                    ".....*..*.*.......*.",
                    ".....*..*.*.......*.",
                    "****.*..*.*.......*.",
                    "*..*.*..*.*.......*.",
                    "*..*.*..*.*.......*.",
                    "*..*.*..*.*.......*.",
                    "*..*.*..*.*.......*.",
                    "****.*..*.*.......*.",
                    ".....*..***.......*.",
                    ".....*............*.",
                    ".....*............*.",
                    ".....*............*.",
                    ".....**************.",
                    "....................",
                    "...................."
                },
                new int[] { 0, 0, 0, 1 });
            yield return (
                new string[]
                {
                    "....................",
                    "********.****.......",
                    "*......*.*..*.......",
                    "*......*.****.......",
                    "********............",
                    "....................",
                    "..********..........",
                    "..*......*..........",
                    "..*......*..........",
                    "..*......*.******...",
                    "..*......*.*....*...",
                    "..*......*.*....*...",
                    "..*......*.*....*...",
                    "..*......*.*....*...",
                    "..*......*.*....*...",
                    "..*......*.******...",
                    "..*......*..........",
                    "..********..........",
                    "....................",
                    "...................."
                },
                new int[] { 0, 0, 0, 0 });
            yield return (
                new string[]
                {
                    "******************..",
                    "*................*..",
                    "*............***.*..",
                    "*......*****.*.*.*..",
                    "*..***.*...*.*.*.*..",
                    "*..*.*.*...*.*.*.*..",
                    "*..*.*.*...*.*.*.*..",
                    "*..*.*.*...*.*.*.*..",
                    "*..***.*...*.*.*.*..",
                    "*......*****.*.*.*..",
                    "*............*.*.*..",
                    "*............*.*.*..",
                    "*............*.*.*..",
                    "*............*.*.*..",
                    "*..********..***.*..",
                    "*..*......*......*..",
                    "*..*......*......*..",
                    "*..********......*..",
                    "*................*..",
                    "******************.."
                },
                new int[] { 0, 1, 1, 1, 1 });
        }

        public static bool CheckResult(int[] result, int[] answer)
        {
            return result.SequenceEqual(answer);
        }
    }
}
